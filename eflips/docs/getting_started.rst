Getting Started
===============

To get started with eFLIPS, it is best to take a look at and execute the example scripts provided in the ``examples`` folder.

It is recommended to execute the scripts in a manner that leaves the variables in memory. This way, you can familiarise yourself with the objects and data created by eFLIPS. In PyCharm, for example, this is achieved by right-clicking in the editor and choosing 'Run File in Python Console'.


Generating Schedules and Grid
-----------------------------

``Generate_Schedules_and_Grid.py`` constructs a synthetic vehicle schedule and a corresponding grid for buses. It illustrates:

* How to create grid points and segments and add them to the grid, using the ``GridPoint`` and ``Grid`` classes,
* how to build schedules using the ``Schedule``, ``ScheduleNode``, ``TripNode``, ``LegNode``, ``SegmentNode`` and, finally, ``ScheduleContainer`` classes,
* how to add random delays to schedules,
* how to export data as pickle files.

Execute this file *once* before executing any of the ``ScheduleSimulation_[...].py`` scripts. Output will be placed in the current working directory unless you change the respective path definitions at the top of the script.

..
    Schedule simulation: DC, no depot
    ---------------------------------

..
    ``ScheduleSimulation_DC_noDepot.py`` is an example schedule simulation using depot charging (DC). No depots are defined; a new (fully charged) vehicle object is generated by the Dispatcher for every schedule. This type of setup can be useful if a 1:1 mapping between schedules and vehicles is desired and the charging process in the depot is of no interest.


Schedule Simulation Using the ScheduleSimulation Class
------------------------------------------------------

The high-level ``ScheduleSimulation`` class enables simulation of vehicle schedules based on a set of flat parameters supplied as a Python dictionary. Using this class, you do not have to get involved with eFLIPS objects such as vehicles, drivers, depots, charging points, charging interfaces etc. -- ``ScheduleSimulation`` takes care of these behind the scenes. For most use cases, the functionality of ``ScheduleSimulation`` should be sufficient, but it currently does not, for example, support in-motion charging.

The example scripts ``ScheduleSimulation_DC.py`` and ``ScheduleSimulation_OC.py`` illustrate the use of ``ScheduleSimulation`` to create a depot charging (DC) and an opportunity charging (OC) scenario, respectively. They also show how to save and plot simulation data.



..
    also simulates depot charging, but using a depot model that allows vehicles to charge (``DepotWithCharging``). If a new schedule commences, the depot is searched for available vehicles; a new vehicle is generated only if there is no vehicle available in the depot.


Using a Custom Simulation Environment
-------------------------------------

In certain situations, the use of ScheduleSimulation is not possible and the user has to manually create the simulation environment, i.e. instantiate and connect the main objects required for simulation. Examples where this is the case include:

* Schedule simulations with technologies not supported by the ScheduleSimulation class (such as in-motion charging).
* Longitudinal dynamics simulations to determine vehicle energy consumption for a given driving profile.
* Determining vehicle parameters, e.g. obtaining the required battery capacity for a given range and driving profile.
* Vehicle consumption analysis, e.g. obtaining the auxiliary power as a function of ambient temperature/cabin temperature/vehicle occupation etc.

Some of these use cases are explained in the following.


Schedule Simulation
^^^^^^^^^^^^^^^^^^^

The files

* ``CustomSimulation_DC_noDepot.py``
* ``CustomSimulation_DC.py``
* ``CustomSimulation_OC.py``

illustrate schedule simulations using the same schedule data as in the previous examples, but without using the high-level ``ScheduleSimulation`` class. ``CustomSimulation_OC.py`` also shows how to change charging interface parameters by manipulating eFLIPS class variables.


Longitudinal Dynamics Simulation
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The script ``LongitudinalDynamicsSimulation.py`` illustrates how to carry out simulation of a SORT 2 driving profile using a longitudinal dynamics traction model.


Batch Schedule Simulation
-------------------------

``BatchScheduleSimulation.py`` illustrates the use of the ``BatchScheduleSimulation`` class that enables rapid simulation and evaluation of several ``ScheduleSimulation`` parameter sets. It is typically used to compute the annual energy consumption of a bus system while considering the seasonal variation in energy consumption.


TCO Calculation
---------------

``TCO_Analysis_DC.py`` demonstrates a TCO calculation based on the schedule simulation and batch simulation explained previously. It shows how to set the cost parameters for the ``TCO`` class and how to extract the relevant demand data (vehicles, infrastructure, energy, staff) from the simulations.

In this example, the objective is to determine the specific system TCO in â‚¬ per km of revenue service, i.e. the cost per km travelled on passenger trips. This result can be found in the attribute ``tco.npv_total_spec['fleet_mileage_productive']``. For further details, refer to the documentation of the TCO class [insert link].


Scheduling
----------




Charging Station Optimisation
-----------------------------


..
    Introduce example simulation scripts; explain structure of scripts, resulting data logging/evaluation objects, and plots. Link to in-depth class documentation where appropriate.