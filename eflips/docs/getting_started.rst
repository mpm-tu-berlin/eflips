Getting Started
===============

..
    Introduce example simulation scripts; explain structure of scripts, resulting data logging/evaluation objects, and plots. Link to in-depth class documentation where appropriate.

To get started with eFLIPS, it is best to take a look at and execute the example scripts provided in the ``eflips-examples`` folder obtainable at the `GitHub repository <https://github.com/mpm-tu-berlin/eflips>`_.

It is recommended to execute the scripts in a manner that leaves the variables in memory. This way, you can familiarise yourself with the objects and data created by eFLIPS. In PyCharm, for example, this is achieved by right-clicking in the editor and choosing 'Run File in Python Console'.

Output will be placed in the current working directory (usually, the ``eflips-examples`` folder) unless you change the respective path definitions at the top of the script.


Generating Schedules and Grid
-----------------------------

``Generate_Schedules_and_Grid.py`` constructs a very simple vehicle schedule and a corresponding grid for buses. It illustrates:

* How to create grid points and segments and add them to the grid, using the ``GridPoint`` and ``Grid`` classes,
* how to build schedules using the ``Schedule``, ``ScheduleNode``, ``TripNode``, ``LegNode``, ``SegmentNode`` and, finally, ``ScheduleContainer`` classes,
* how to add random delays to schedules,
* how to export data as pickle files.

If your task is to simulate *existing* vehicle schedules to assess their electrification potential, the first step is to import these schedules into eFLIPS. Due to the variety of formats available, eFLIPS does not include direct import functions for raw operator's schedule data - you will have to write these yourself. After importing the raw data into Python, proceed to construct eFLIPS schedule objects as shown in this example.


Schedule Simulation Using the ScheduleSimulation Class
------------------------------------------------------

The high-level ``ScheduleSimulation`` class enables simulation of vehicle schedules based on a set of parameters supplied as a Python dictionary. Using this class, you do not have to get involved with eFLIPS objects such as vehicles, drivers, depots, charging points, charging interfaces etc. -- ``ScheduleSimulation`` takes care of these behind the scenes. For most use cases, the functionality of ``ScheduleSimulation`` should be sufficient, but it currently does not, for example, support in-motion charging.

The example scripts ``ScheduleSimulation_DC.py`` and ``ScheduleSimulation_OC.py`` illustrate the use of ``ScheduleSimulation`` to simulate a depot charging (DC) and an opportunity charging (OC) scenario, respectively. They also show how to save and plot simulation data. The schedule data required for the simulations is generated by eFLIPS' scheduling algorithm. Before executing the simulation scripts, you must therefore run the following scripts once:

* ``Generate_Timetable.py``
* ``Generate_Schedules_DC.py`` (for depot charging)
* ``Generate_Schedules_OC.py`` (for opportunity charging).

More details on scheduling are provided below.


Batch Schedule Simulation
-------------------------

``BatchScheduleSimulation_DC.py`` illustrates the use of the ``BatchScheduleSimulation`` class that enables rapid simulation and evaluation of several ``ScheduleSimulation`` parameter sets. It is typically used to compute the annual energy consumption of a bus system while considering the seasonal variation in energy consumption. In this example, we calculate the annual energy consumption for the depot charging scenario.

Before execution, you must run the following scripts once:

* ``Generate_Timetable.py``
* ``Generate_Schedules_DC.py``
* ``ScheduleSimulation_DC.py``.


TCO Calculation
---------------

``TCO_Analysis_DC.py`` demonstrates a TCO calculation based on the schedule simulation and batch simulation explained previously. It shows how to set the cost parameters for the ``TCO`` class and how to extract the relevant demand data (vehicles, infrastructure, energy, staff) from the simulations in order to pass them to the TCO class.

In this example, the objective is to determine the specific system TCO in â‚¬ per km of revenue service, i.e. the cost per km travelled on passenger trips. This result can be found in the attribute ``tco.npv_total_spec['fleet_mileage_productive']``. For further details, refer to the documentation of the TCO class [ToDo: insert link].

Before execution, you must run the following scripts once:

* ``Generate_Timetable.py``
* ``Generate_Schedules_DC.py``
* ``ScheduleSimulation_DC.py``
* ``BatchScheduleSimulation_DC.py``.


Scheduling
----------

If your goal is to create fully electrified scenarios based on existing timetables, you will need to create a set of schedules adapted to the vehicles' range and charging time constraints. eFLIPS provides a greedy scheduling algorithm allowing the user to rapidly create schedules for depot charging and opportunity charging, as showcased in ``Generate_Schedules_DC.py`` and ``Generate_Schedules_OC.py``, respectively. These scripts import a timetable, invoke the scheduling algorithm, export the resulting schedules for later use and plot a diagram of the schedules.

Before generating schedules, we must create a timetable. This is demonstrated in ``Generate_Timetable.py`` which has to be executed once before schedule creation. ``Generate_Timetable.py`` illustrates how to build a timetable from eFLIPS objects - similar to building schedules in the first example above - after importing the raw timetable data. There is no direct import for operator-specific timetable formats; this has to be implemented by the user.


Charging Station Optimisation
-----------------------------

``ChargingStationOptimisation.py`` demonstrates how to determine cost-optimised charging point locations for opportunity charging using the ``ChargingInfrastructureIterator`` class. ``ChargingInfrastructureIterator`` treats every combination of charging locations as a separate scheduling problem for which schedules are created and a simulation and TCO evaluation are carried out. A genetic algorithm is used to find the most cost-effective combination of charging locations. Thus, the charging optimisation requires an extensive parameter set including scheduling, simulation and TCO parameters.

*Note:* When using the "Run File in Python Console" feature in PyCharm under Windows, the Python process created when executing the script may "hang" once finished. This appears to be a bug in PyCharm that occurs when using the ``multiprocessing`` module. Before the script can be re-run, all Python processes opened by it have to be killed manually using the Windows Task Manager. Use the normal "Run" command to prevent this from happening. (If you have selected "Run File in Python Console" before, you must untick "Run with Python Console" in "Run > Edit Configurations".)

A timetable is required to run this script, so ``Generate_Timetable.py`` has to be executed once before.




Using a Custom Simulation Environment
-------------------------------------

In certain situations, the use of ScheduleSimulation is not possible and the user has to manually create the simulation environment, i.e. instantiate and connect the main objects required for simulation. Examples where this is the case include:

* Schedule simulations with technologies not supported by the ScheduleSimulation class (such as in-motion charging).
* Longitudinal dynamics simulations to determine vehicle energy consumption for a given driving profile.
* Determining vehicle parameters, e.g. obtaining the required battery capacity for a given range and driving profile.
* Vehicle consumption analysis, e.g. obtaining the auxiliary power as a function of ambient temperature/cabin temperature/vehicle occupation etc.

Some of these use cases are explained in the following.


Schedule Simulation
^^^^^^^^^^^^^^^^^^^

The files

* ``CustomSimulation_DC_noDepot.py``
* ``CustomSimulation_DC.py``
* ``CustomSimulation_OC.py``

illustrate schedule simulations using the same schedule data as in the previous examples, but without using the high-level ``ScheduleSimulation`` class. ``CustomSimulation_OC.py`` also shows how to change charging interface parameters by manipulating eFLIPS class variables (this also works when using the ``ScheduleSimulation`` class).

Before execution, you must run the following scripts once:

* ``Generate_Timetable.py``
* ``Generate_Schedules_DC.py`` (for depot charging)
* ``Generate_Schedules_OC.py`` (for opportunity charging).


Longitudinal Dynamics Simulation
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The script ``LongitudinalDynamicsSimulation.py`` illustrates how to carry out simulation of a SORT 2 driving profile using a longitudinal dynamics traction model.
